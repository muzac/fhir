[{"C:\\Projects\\fhir\\src\\index.js":"1","C:\\Projects\\fhir\\src\\App.js":"2","C:\\Projects\\fhir\\src\\reportWebVitals.js":"3","C:\\Projects\\fhir\\src\\InitialForm.js":"4","C:\\Projects\\fhir\\src\\PatientDetail.js":"5"},{"size":500,"mtime":499162500000,"results":"6","hashOfConfig":"7"},{"size":226,"mtime":1606831557994,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"7"},{"size":3505,"mtime":1606908078046,"results":"10","hashOfConfig":"7"},{"size":1426,"mtime":1606907906958,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"14nl46l",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"14"},"C:\\Projects\\fhir\\src\\index.js",[],["25","26"],"C:\\Projects\\fhir\\src\\App.js",["27"],"import logo from './logo.svg';\nimport './App.css';\nimport InitialForm from './InitialForm';\n\nfunction App() {\n  return (\n    <div className=\"App\" class=\"App-header\">\n     <InitialForm/>\n    </div>\n\n  );\n}\n\nexport default App;\n","C:\\Projects\\fhir\\src\\reportWebVitals.js",[],"C:\\Projects\\fhir\\src\\InitialForm.js",["28"],"C:\\Projects\\fhir\\src\\PatientDetail.js",["29","30"],"import React, { Component } from \"react\";\r\nimport Parser from 'html-react-parser';\r\nimport './PatientDetail.css';\r\n\r\nclass PatientDetail extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        patientDetails: \"\"\r\n      };\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n      // Typical usage (don't forget to compare props):\r\n      if (this.props.patientId !== prevProps.patientId) {\r\n        console.log(\"Updated \" + this.props.patientId)\r\n        fetch(this.props.url + '/Patient/' + this.props.patientId + '/' + '?_format=json&id=' )\r\n          .then(async response => {\r\n              const data = await response.json();\r\n              // check for error response\r\n              if (!response.ok) {\r\n                  // get error message from body or default to response statusText\r\n                  const error = (data && data.message) || response.statusText;\r\n                  return Promise.reject(error);\r\n              }\r\n              this.setState({ patientDetails: data.text.div });\r\n          })\r\n          .catch(error => {\r\n            this.setState({ errorMessage: error.toString() });\r\n            console.error('There was an error!', error);\r\n          });\r\n      }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n          <div class=\"details\">\r\n            {Parser(this.state.patientDetails)}\r\n          </div>\r\n        )\r\n    };\r\n}\r\n\r\nexport default PatientDetail;",{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":1,"column":8,"nodeType":"37","messageId":"38","endLine":1,"endColumn":12},{"ruleId":"35","severity":1,"message":"39","line":2,"column":8,"nodeType":"37","messageId":"38","endLine":2,"endColumn":16},{"ruleId":"35","severity":1,"message":"40","line":2,"column":8,"nodeType":"37","messageId":"38","endLine":2,"endColumn":14},{"ruleId":"41","severity":1,"message":"42","line":17,"column":73,"nodeType":"43","messageId":"44","endLine":17,"endColumn":74},"no-native-reassign",["45"],"no-negated-in-lhs",["46"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'ReactDOM' is defined but never used.","'Parser' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","no-global-assign","no-unsafe-negation"]